
/* 
 * This is a placeholder for the Mozilla WebExtension browser polyfill.
 * In an actual extension, you would include the full browser-polyfill.min.js
 * from https://unpkg.com/webextension-polyfill/dist/browser-polyfill.min.js
 *
 * This placeholder exists to ensure the build process finds the file.
 */

if (typeof browser === 'undefined' && typeof chrome !== 'undefined') {
  // Define a minimal polyfill for the browser API
  self.browser = (function() {
    const api = {
      runtime: {
        onMessage: {
          addListener: chrome.runtime.onMessage.addListener.bind(chrome.runtime.onMessage),
          removeListener: chrome.runtime.onMessage.removeListener.bind(chrome.runtime.onMessage)
        },
        sendMessage: function() {
          return new Promise((resolve, reject) => {
            try {
              chrome.runtime.sendMessage.apply(chrome.runtime, [
                ...arguments, 
                (response) => {
                  if (chrome.runtime.lastError) {
                    reject(chrome.runtime.lastError);
                  } else {
                    resolve(response);
                  }
                }
              ]);
            } catch(e) {
              reject(e);
            }
          });
        }
      },
      tabs: {
        query: function() {
          return new Promise((resolve, reject) => {
            try {
              chrome.tabs.query.apply(chrome.tabs, [
                ...arguments,
                (tabs) => {
                  if (chrome.runtime.lastError) {
                    reject(chrome.runtime.lastError);
                  } else {
                    resolve(tabs);
                  }
                }
              ]);
            } catch(e) {
              reject(e);
            }
          });
        },
        sendMessage: function() {
          return new Promise((resolve, reject) => {
            try {
              chrome.tabs.sendMessage.apply(chrome.tabs, [
                ...arguments,
                (response) => {
                  if (chrome.runtime.lastError) {
                    reject(chrome.runtime.lastError);
                  } else {
                    resolve(response);
                  }
                }
              ]);
            } catch(e) {
              reject(e);
            }
          });
        }
      },
      storage: {
        local: {
          get: function() {
            return new Promise((resolve, reject) => {
              try {
                chrome.storage.local.get.apply(chrome.storage.local, [
                  ...arguments,
                  (items) => {
                    if (chrome.runtime.lastError) {
                      reject(chrome.runtime.lastError);
                    } else {
                      resolve(items);
                    }
                  }
                ]);
              } catch(e) {
                reject(e);
              }
            });
          },
          set: function() {
            return new Promise((resolve, reject) => {
              try {
                chrome.storage.local.set.apply(chrome.storage.local, [
                  ...arguments,
                  () => {
                    if (chrome.runtime.lastError) {
                      reject(chrome.runtime.lastError);
                    } else {
                      resolve();
                    }
                  }
                ]);
              } catch(e) {
                reject(e);
              }
            });
          }
        }
      }
    };

    return api;
  })();
}

console.log('Browser polyfill loaded');
